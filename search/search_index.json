{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome","text":"<p>Hi, I\u2019m Miko Pineda (ch1se), an IT student and passionate cybersecurity enthusiast active on Hack The Box. I enjoy solving challenges, exploring offensive security, and learning more about ethical hacking.</p> <p>Currently, I\u2019ve been focusing more on OSINT and blue teaming, but I still enjoy jumping into red teaming now and then, especially with the seasonal machines on Hack The Box.</p>"},{"location":"#get-in-touch","title":"Get in Touch","text":"<p>Feel free to connect with me or check out my projects on the following platforms:</p> <ul> <li>LinkedIn</li> <li>GitHub</li> </ul>"},{"location":"certificates-and-participations/cert-1/","title":"HackTheBox - Cyber Apocalypse CTF 2025: Tales from Eldoria","text":"<p>I\u2019m proud to share my participation in the Hack The Box CTF with Bembangan Time.</p> <p>Rank: 40th out of 8,130 teams</p> <p>Challenges Solved: 74/77</p> <p>CTF Date: 21st March \u2013 26th March 2025</p> <p>Total Points: 54,025</p> <p>I only managed to solve 1 challenge, but it was a great learning experience. Big thanks to my team for the support \u2014 looking forward to the next one!</p> <p></p>"},{"location":"certificates-and-participations/cert-2/","title":"The SecOps Group","text":"<p>Hey there! Here\u2019s a quick look at some of the certifications I\u2019ve earned as I continue building my skills in cybersecurity \u2014 starting with a few from The SecOps Group.</p>"},{"location":"certificates-and-participations/cert-2/#certified-network-security-practitioner-cnsp","title":"Certified Network Security Practitioner (CNSP)","text":""},{"location":"certificates-and-participations/cert-2/#certified-appsec-practitioner-cap","title":"Certified AppSec Practitioner (CAP)","text":"<p>Huge thanks to The SecOps Group for providing such solid, hands-on learning experiences.\\ Every cert is a step forward, and I\u2019m proud to be growing with resources like these.</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/dude-where-is-my-car/","title":"Dude where is my car","text":"<p>CATEGORY - OSINT</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/dude-where-is-my-car/#challenge-description","title":"Challenge Description","text":"<p>I'm not sure where I lost my car, but I believe I\u2019ll remember if I can see the original photo again. Can you find it? I only have this photoshopped and cropped version, but I\u2019m confident it contains enough information for an OSINT expert. To prove your success, submit a flag with the Build Number from the EXIF data in the format: <code>1753c{Build Number}</code>.</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/dude-where-is-my-car/#provided-image","title":"Provided Image","text":""},{"location":"ctf-writeups/1753ctf-2025-writeups/dude-where-is-my-car/#step-1-checking-metadata","title":"Step 1: Checking Metadata","text":"<p>I used <code>exiftool</code> to examine the metadata of the provided image:</p> <pre><code>exiftool dude-where-is-my_car.jpg\n</code></pre> <p>Output (trimmed):</p> <pre><code>...\nFile Name                       : dude-where-is-my_car.jpg\nFile Size                       : 1828 kB\nImage Size                      : 2132x2040\nMIME Type                       : image/jpeg\n...\n</code></pre> <p>Unfortunately, no useful EXIF data (like GPS or device info) was found.</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/dude-where-is-my-car/#step-2-reverse-image-search","title":"Step 2: Reverse Image Search","text":"<p>I uploaded the image to Google Image Search.</p> <p>After skimming through the results, nothing matched exactly. So, I analyzed the image further myself.</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/dude-where-is-my-car/#step-3-analyzing-visual-clues","title":"Step 3: Analyzing Visual Clues","text":"<p>While inspecting the image, I spotted a URL on the license plate:</p> <pre><code>www.lieberzupiper.de\n</code></pre> <p>Visiting the URL directly didn\u2019t work (domain is offline), so I searched for <code>lieberzupiper de</code> on Google.</p> <p>Bingo! I found a listing on:</p> <pre><code>https://tablica-rejestracyjna.pl/WWY?p=373\n</code></pre> <p>Unfortunately, it didn\u2019t have the full original image either.</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/dude-where-is-my-car/#step-4-exploring-the-site","title":"Step 4: Exploring the Site","text":"<p>I clicked on \"Wi\u0119cej komentarzy \u00bb\", which led to:</p> <pre><code>https://tablica-rejestracyjna.pl/komentarze/WWY\n</code></pre> <p>There, I browsed through the pages manually until I found the original image on page 3.</p> <p>Downloaded it and prepared to analyze its metadata.</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/dude-where-is-my-car/#step-5-extracting-the-flag","title":"Step 5: Extracting the Flag","text":"<p>Ran <code>exiftool</code> on the downloaded original image:</p> <pre><code>exiftool original-car-photo.jpg\n</code></pre> <p>This time I got the jackpot:</p> <pre><code>...\nBuild Number                    : S2RUBS32.51-15-3-19\n...\n</code></pre>"},{"location":"ctf-writeups/1753ctf-2025-writeups/dude-where-is-my-car/#step-6-submitting-the-flag","title":"Step 6: Submitting the Flag","text":"<p>I submitted the flag using the required format:</p> <pre><code>1753c{S2RUBS32.51-15-3-19}\n</code></pre> <p>Correct!</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/dude-where-is-my-car/#final-flag","title":"Final Flag","text":"<pre><code>1753c{S2RUBS32.51-15-3-19}\n</code></pre>"},{"location":"ctf-writeups/1753ctf-2025-writeups/happy-new-year%21/","title":"Happy New Year!","text":"<p>CATEGORY - OSINT</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/happy-new-year%21/#challenge-description","title":"Challenge Description","text":"<p>Can you tell where we last celebrated New Year's?</p> <p>The flag is the city name in English spelling.</p> <p>Flag format: <code>1753c{cityname}</code></p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/happy-new-year%21/#provided-image","title":"Provided Image","text":""},{"location":"ctf-writeups/1753ctf-2025-writeups/happy-new-year%21/#step-1-checking-metadata","title":"Step 1: Checking Metadata","text":"<p>As usual, I started with <code>exiftool</code> to check if there was anything useful in the image metadata.</p> <p>Unfortunately, nothing special came up in the EXIF data.</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/happy-new-year%21/#step-2-reverse-image-location","title":"Step 2: Reverse Image Location","text":"<p>Next, I used my favorite OSINT image tool:\\  findpiclocation.com</p> <p>The tool quickly identified the location as Larnaca.</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/happy-new-year%21/#step-3-submitting-the-flag","title":"Step 3: Submitting the Flag","text":"<p>Based on the result, I submitted the following flag:</p> <pre><code>1753c{larnaca}\n</code></pre> <p>Correct!</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/happy-new-year%21/#final-flag","title":"Final Flag","text":"<pre><code>1753c{larnaca}\n</code></pre>"},{"location":"ctf-writeups/1753ctf-2025-writeups/somewhere-in-space/","title":"Somewhere in Space","text":"<p>CATEGORY - OSINT</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/somewhere-in-space/#challenge-description","title":"Challenge Description","text":"<p>This handsome man is looking at a beautiful woman.</p> <p>The flag is a filename in which the woman's face is stored. Use only characters that are at least 90% visible.</p> <p>Flag format: <code>1753c{filename}</code></p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/somewhere-in-space/#provided-image","title":"Provided Image","text":""},{"location":"ctf-writeups/1753ctf-2025-writeups/somewhere-in-space/#step-1-exif-metadata","title":"Step 1: EXIF Metadata","text":"<p>I ran <code>exiftool</code> to inspect any metadata that might help.</p> <p>Nothing particularly useful stood out in the metadata.</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/somewhere-in-space/#step-2-reverse-image-search","title":"Step 2: Reverse Image Search","text":"<p>Next, I turned to Google Image Search.</p> <p>Among the results, two sites stood out \u2014 Facebook and Vagabundler. I went ahead and explored the Vagabundler page.</p> <p>\ud83d\udd17 Vagabundler Street Art - Agiou Andreou 253</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/somewhere-in-space/#step-3-clue-from-the-source","title":"Step 3: Clue From the Source","text":"<p>The first image on the site caught my attention. Looking at the browser tab title gave me a very promising filename: <code>Aphrodite_final.j</code>.</p> <p>Based on the challenge description, I used this filename as the flag.</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/somewhere-in-space/#step-4-submitting-the-flag","title":"Step 4: Submitting the Flag","text":"<pre><code>1753c{Aphrodite_final.j}\n</code></pre> <p>Correct!</p>"},{"location":"ctf-writeups/1753ctf-2025-writeups/somewhere-in-space/#final-flag","title":"Final Flag","text":"<pre><code>1753c{Aphrodite_final.j}\n</code></pre>"},{"location":"ctf-writeups/acectf-2025-writeups/broken-secrets/","title":"Broken Secrets","text":"<p>CATEGORY - FORENSICS</p> <p>A file is attached to the challenge.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/broken-secrets/#introduction","title":"Introduction","text":"<p>This challenge provides a suspicious file that needs to be analyzed to extract a hidden flag. By investigating its structure, identifying corruption, and repairing it, we can uncover the secret message.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/broken-secrets/#steps","title":"Steps","text":""},{"location":"ctf-writeups/acectf-2025-writeups/broken-secrets/#step-1-extracting-and-searching-for-the-flag","title":"Step 1: Extracting and Searching for the Flag","text":"<p>After extracting the file, I navigated into the directory and ran a quick check using <code>cat</code> and <code>grep</code> to search for a possible flag.</p> <pre><code>find . -type f -exec cat {} \\; | grep -a -i 'acectf'\n</code></pre> <p>However, this yielded no results, meaning the flag could be hidden, encrypted, or embedded elsewhere.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/broken-secrets/#step-2-exploring-the-directory-structure","title":"Step 2: Exploring the Directory Structure","text":"<p>The <code>word</code> directory looked interesting, so I navigated into it to investigate further.</p> <p>Finding nothing useful there, I decided to explore the <code>media</code> directory, as media files often contain hidden data.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/broken-secrets/#step-3-analyzing-the-suspicious-file","title":"Step 3: Analyzing the Suspicious File","text":"<p>Inside <code>media</code>, I found a file that caught my attention. Running a few tests revealed that it might be a PNG file due to the presence of the <code>IHDR</code> chunk, a key indicator of PNG format.\\</p> <p>However, there was a problem. Attempting to copy and rename the file to a <code>.png</code> extension didn\u2019t work. I then tried using <code>convert</code>:</p> <pre><code>convert not_so_suspicious_file file.png\n</code></pre> <p>But this still resulted in an error. A quick Google search led me to suspect a corrupted file header.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/broken-secrets/#step-4-identifying-the-header-issue","title":"Step 4: Identifying the Header Issue","text":"<p>The expected PNG file header should be:</p> <pre><code>89 50 4E 47 0D 0A 1A 0A\n</code></pre> <p>However, checking the file\u2019s actual header revealed:</p> <pre><code>12 2E D4 A7 0D 0A 1A 0A\n</code></pre> <p>This confirmed that the first four bytes of the header were incorrect.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/broken-secrets/#step-5-fixing-the-corrupted-png-header","title":"Step 5: Fixing the Corrupted PNG Header","text":"<p>To repair the file, I replaced the incorrect bytes with the correct PNG signature using the <code>dd</code> command:</p> <pre><code>printf '\\x89PNG' | dd of=file.png bs=1 seek=0 count=4 conv=notrunc\n</code></pre> <p>This successfully restored the image.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/broken-secrets/#step-6-extracting-the-flag","title":"Step 6: Extracting the Flag","text":"<p>Opening the repaired image revealed the hidden flag:</p>"},{"location":"ctf-writeups/acectf-2025-writeups/broken-secrets/#flag","title":"FLAG","text":"<pre><code>ACECTF{h34d3r_15_k3y}\n</code></pre>"},{"location":"ctf-writeups/acectf-2025-writeups/cryptic-pixels/","title":"Cryptic Pixels","text":"<p>CATEGORY - STEGANOGRAPHY</p>"},{"location":"ctf-writeups/acectf-2025-writeups/cryptic-pixels/#introduction","title":"Introduction","text":"<p>In this challenge, we are given an image file that likely contains hidden data. Using steganography techniques, we extract and decipher the hidden message to reveal the flag.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/cryptic-pixels/#steps","title":"Steps","text":""},{"location":"ctf-writeups/acectf-2025-writeups/cryptic-pixels/#step-1-initial-file-analysis","title":"Step 1: Initial File Analysis","text":"<p>The challenge provides a PNG file.</p> <p>To check for metadata, I used <code>exiftool</code>, but nothing interesting was found.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/cryptic-pixels/#step-2-verifying-file-integrity","title":"Step 2: Verifying File Integrity","text":"<p>To ensure the file was actually a PNG and not something else in disguise, I used <code>xxd</code>:</p> <pre><code>xxd CrypticPixels.png | head\n</code></pre> <p>This revealed that the file contained a hidden <code>flag.txt</code> inside.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/cryptic-pixels/#step-3-extracting-hidden-data","title":"Step 3: Extracting Hidden Data","text":"<p>Since the file seemed to contain embedded data, I used <code>binwalk</code> to extract it:</p> <pre><code>binwalk -e CryticPixels.png\n</code></pre> <p>This extracted a ZIP archive, but it was password-protected.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/cryptic-pixels/#step-4-cracking-the-zip-password","title":"Step 4: Cracking the ZIP Password","text":"<p>To crack the ZIP password, I used <code>fcrackzip</code> with the <code>rockyou.txt</code> wordlist:</p> <pre><code>fcrackzip -u -D -p /usr/share/wordlists/rockyou.txt B8103.zip\n</code></pre> <p>Password: <code>qwertyuiop</code></p>"},{"location":"ctf-writeups/acectf-2025-writeups/cryptic-pixels/#step-5-analyzing-the-flag","title":"Step 5: Analyzing the Flag","text":"<p>After extracting <code>flag.txt</code>, the flag appeared scrambled, suggesting it had been encoded or ciphered.</p> <p>I attempted common ROT ciphers (<code>ROT5, ROT13, ROT18, ROT47</code>), but none worked.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/cryptic-pixels/#step-6-deciphering-with-a-caesar-cipher","title":"Step 6: Deciphering with a Caesar Cipher","text":"<p>Since ROT didn't work, I tried a Caesar cipher with shifts from 1 to 9 until I found the correct shift.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/cryptic-pixels/#flag","title":"FLAG","text":"<pre><code>ACECTF{h4h4_y0u'r3_5m4r7}\n</code></pre>"},{"location":"ctf-writeups/acectf-2025-writeups/social-circles/","title":"Social Circles","text":"<p>CATEGORY - OSINT</p>"},{"location":"ctf-writeups/acectf-2025-writeups/social-circles/#introduction","title":"Introduction","text":"<p>This OSINT challenge provides a username and instructs us to follow them on YouTube. Our goal is to track the user across different platforms and extract the hidden flag.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/social-circles/#steps","title":"Steps","text":""},{"location":"ctf-writeups/acectf-2025-writeups/social-circles/#step-1-checking-the-youtube-channel","title":"Step 1: Checking the YouTube Channel","text":"<p>The challenge provides the username: </p> <pre><code>AhjussiPlayz\n</code></pre> <p>So, I searched for this YouTube channel and found that it had only one video uploaded. Since it was the only available content, it was likely where the flag was hidden.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/social-circles/#step-2-inspecting-the-video-for-clues","title":"Step 2: Inspecting the Video for Clues","text":"<p>I played the video, and at first, nothing seemed unusual. However, I noticed that a transcript was available, suggesting that closed captions (CC) were present.</p> <p>Checking the English CC revealed nothing.</p> <p>I then switched to Korean CC, and this was where I found something interesting.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/social-circles/#step-3-translating-the-hidden-text","title":"Step 3: Translating the Hidden Text","text":"<p>I used Google Translate to translate the Korean subtitles.</p> <p>It revealed a new username:</p> <pre><code>wimebix884\n</code></pre> <p>This was an important lead, so I decided to search for this username across different platforms.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/social-circles/#step-4-tracking-the-username-with-sherlock","title":"Step 4: Tracking the Username with Sherlock","text":"<p>I used Sherlock, a Kali Linux CLI tool for username enumeration, to find accounts associated with wimebix884.</p> <p>Sherlock found multiple results, so I manually checked seven links one by one.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/social-circles/#step-5-finding-the-account-on-smule","title":"Step 5: Finding the Account on Smule","text":"<p>One of the results led me to this Smule profile:</p> <p>\ud83d\udd17 https://www.smule.com/wimebix884</p> <p>Under the Songs tab, I noticed an attachment named \"Flag Debaucher\". This looked suspicious, so I clicked on it.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/social-circles/#step-6-extracting-the-final-flag","title":"Step 6: Extracting the Final Flag","text":"<p>The Smule attachment contained a Google Drive link:</p> <p>\ud83d\udd17 https://drive.google.com/file/d/1093uvDYSVWke8ze2jdgJ1rVehz51Jx00</p> <p>I played the audio file uploaded to Google Drive and successfully extracted the flag.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/social-circles/#flag","title":"FLAG","text":"<pre><code>ACECTF{mu171m3d14_f146}\n</code></pre>"},{"location":"ctf-writeups/acectf-2025-writeups/tabs%26spaces/","title":"Tabs\\&amp;Spaces","text":"<p>CATEGORY - STEGANOGRAPHY</p>"},{"location":"ctf-writeups/acectf-2025-writeups/tabs%26spaces/#introduction","title":"Introduction","text":"<p>This challenge provides a ZIP file containing multiple files. Our goal is to analyze them and extract a hidden flag, which appears to involve whitespace-based steganography.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/tabs%26spaces/#steps","title":"Steps","text":""},{"location":"ctf-writeups/acectf-2025-writeups/tabs%26spaces/#step-1-extracting-and-inspecting-the-zip-file","title":"Step 1: Extracting and Inspecting the ZIP File","text":"<p>The challenge provides a ZIP archive. After extracting it, we see the following files inside:</p> <p>A Python script is present, which appears to be for checking file integrity and isn't immediately useful.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/tabs%26spaces/#step-2-identifying-an-anomalous-file","title":"Step 2: Identifying an Anomalous File","text":"<p>Navigating into the <code>files/</code> directory, I checked the contents of all files. One file stood out due to its different color and unusual file extension.</p> <p>To make it easier to work with, I renamed the file to remove the extra <code>.</code> in its name.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/tabs%26spaces/#step-3-initial-steganography-checks","title":"Step 3: Initial Steganography Checks","text":"<p>Since the file was a JPG image, I performed basic steganography checks:</p> <ul> <li>Exiftool \u2192 No interesting metadata found.</li> <li>Steghide (without passphrase) \u2192 Extracted a hidden text file named <code>whitespace_flag.txt</code>.</li> </ul> <pre><code>steghide extract -sf 87.jpg\n</code></pre>"},{"location":"ctf-writeups/acectf-2025-writeups/tabs%26spaces/#step-4-analyzing-whitespace_flagtxt","title":"Step 4: Analyzing <code>whitespace_flag.txt</code>","text":"<p>Opening <code>whitespace_flag.txt</code> in Sublime Text, I noticed that the content wasn't regular text. Instead, it appeared to contain whitespace-based encoding.</p> <p>Searching online for whitespace steganography, I found tools like stegsnow. However, <code>stegsnow</code> didn't reveal any meaningful text, suggesting that another encoding method was used.</p> <p>Upon closer inspection, I saw patterns of tabs (<code>^I</code>) and spaces (<code>\u2423</code>), which indicated binary encoding, where:</p> <ul> <li>Tab (<code>^I</code>) = 1</li> <li>Space (<code>\u2423</code>) = 0</li> </ul>"},{"location":"ctf-writeups/acectf-2025-writeups/tabs%26spaces/#step-5-converting-whitespace-to-binary","title":"Step 5: Converting Whitespace to Binary","text":"<p>To decode the message, I used the following command:</p> <pre><code>cat whitespace_flag.txt | tr ' ' '0' | tr '\\t' '1' | tr -d '\\n'\n</code></pre> <p>This converted the hidden text into a binary string:</p> <pre><code>0100000101000011010001010100001101010100010001100111101101101110001100000101111100110011011110000111000000110001001100000011000100110111010111110110111000110000010111110110011100110100001100010110111001111101\n</code></pre>"},{"location":"ctf-writeups/acectf-2025-writeups/tabs%26spaces/#step-6-converting-binary-to-text","title":"Step 6: Converting Binary to Text","text":"<p>For the final step, I converted the binary data to readable text using Perl:</p> <pre><code>echo \"0100000101000011010001010100001101010100010001100111101101101110001100000101111100110011011110000111000000110001001100000011000100110111010111110110111000110000010111110110011100110100001100010110111001111101\" | perl -lpe '$_=pack\"B*\",$_'\n</code></pre>"},{"location":"ctf-writeups/acectf-2025-writeups/tabs%26spaces/#flag","title":"FLAG","text":"<pre><code>ACECTF{n0_3xp1017_n0_g41n}\n</code></pre>"},{"location":"ctf-writeups/acectf-2025-writeups/the-mysterious-building/","title":"The Mysterious Building","text":"<p>CATEGORY - OSINT</p>"},{"location":"ctf-writeups/acectf-2025-writeups/the-mysterious-building/#introduction","title":"Introduction","text":"<p>This challenge provides an image of a building, and the objective is to identify its name and location using OSINT techniques.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/the-mysterious-building/#steps","title":"Steps","text":""},{"location":"ctf-writeups/acectf-2025-writeups/the-mysterious-building/#step-1-inspecting-the-given-image","title":"Step 1: Inspecting the Given Image","text":"<p>The challenge provides an image:</p> <p>To gather initial information, I used ExifTool to check the image metadata.</p> <pre><code>exiftool OSINT-1.jpg\n</code></pre> <p>In the metadata, I found an interesting Description field that stated:</p> <pre><code>Description: National Capital of India\n</code></pre> <p>This strongly hinted that the building was located in Delhi, India.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/the-mysterious-building/#step-2-reverse-image-search","title":"Step 2: Reverse Image Search","text":"<p>Since metadata confirmed that the image was from India's capital, I used FindPicLocation, an image-based location search tool.</p> <p>The results suggested that the building was near Pitampura TV Tower, Delhi, India.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/the-mysterious-building/#step-3-searching-for-the-building","title":"Step 3: Searching for the Building","text":"<p>Finding the exact building using Google Maps was challenging since I wasn\u2019t familiar with the area. Instead, I searched YouTube for:</p> <pre><code>buildings near Pitampura TV Tower\n</code></pre> <p>I found a relevant video:\\ Driving in Delhi (Pitampura) - India</p> <p>At 1:48 minutes, I noticed a similar logo on a building, so I rewound the video slightly.</p>"},{"location":"ctf-writeups/acectf-2025-writeups/the-mysterious-building/#step-4-identifying-the-building","title":"Step 4: Identifying the Building","text":"<p>The video showed the name \"PP TRADE CENTER\" on the building.</p> <p>Now that I had a possible name, I searched for it on Google Maps to confirm its existence.</p> <p>The same logo appeared, but it was on a different building, so I checked another nearby location.</p> <p>This confirmed that the building\u2019s name is PP Trade Center (or Centre).</p>"},{"location":"ctf-writeups/acectf-2025-writeups/the-mysterious-building/#flag","title":"FLAG","text":"<pre><code>ACECTF{pp_trade_center}\n</code></pre>"},{"location":"ctf-writeups/bitsctf-2025-writeups/hotpause/","title":"HotPause","text":"<p>CATEGORY: OSINT </p>"},{"location":"ctf-writeups/bitsctf-2025-writeups/hotpause/#introduction","title":"Introduction","text":"<p>HotPause is an open-source intelligence challenge focused on uncovering information from a particular event. It begins with identifying the precise location where a video was filmed. The next task is to locate an agent's specific seat within that venue. The challenge concludes by retrieving the recorded data stream from a Flipper Zero during the beat drop of Chris Martin's \"I love you so...\" to determine the right color</p>"},{"location":"ctf-writeups/bitsctf-2025-writeups/hotpause/#step-1-finding-the-event-location","title":"Step 1: Finding the Event Location","text":"<p>The challenge provides an <code>.mp4</code> file, which suggests that the first step is to analyze the video for any identifiable details. To make the investigation easier, I took a screenshot from the video at a key moment.</p> <p>concerpt.mp4</p> <p>To find the event location, I performed a reverse image search using Google Images.</p> <p>reverse image search result screenshot</p> <p>The results showed multiple Instagram posts with similar visuals, one of which revealed the city name.</p> <p>Initially, I tried MUMBAI, but it was incorrect. After retrying with AHMEDABAD, I got the correct answer.</p>"},{"location":"ctf-writeups/bitsctf-2025-writeups/hotpause/#step-2-determining-the-exact-seat-block","title":"Step 2:  Determining the Exact Seat Block","text":"<p>I began by searching \"Coldplay Ahmedabad seating chart\" on Google.</p> <p>google search result screenshot</p> <p>https://coldplayindia.com/best-seats-for-coldplay-ahmedabad-concert/</p> <p>Comparing the seating chart with the screenshot from the video, I could see that the agent was sitting on the right side of the stadium.</p> <p>To find the exact block, I started testing different inputs, beginning with P block and moving to Q block. After multiple attempts, I found the correct answer: Q3.</p>"},{"location":"ctf-writeups/bitsctf-2025-writeups/hotpause/#step-3-retrieving-the-flipper-zero-data-stream","title":"Step 3. Retrieving the Flipper Zero Data Stream","text":"<p>Step 3 took me way longer than I expected. I spent hours trying different approaches before finally figuring it out. I even asked for hints to make sure I was on the right track. Along the way, I fell into several rabbit holes\u2014attempting to decode the data as binary, misinterpreting the format as hexadecimal, and overcomplicating the extraction process. After a lot of trial and error, I finally found the correct answer.</p> <p>To figure out the correct answer, I started by searching \"Coldplay India concert wristband\" on Google. This led me to an article explaining how the LED wristbands work:</p> <p>https://tech.hindustantimes.com/tech/news/coldplay-concert-india-how-led-wristbands-works-and-create-magical-moments-71726983355343.html</p> <p>From there, I learned that the wristbands use a specific technology, so my next search was \"Coldplay wristband infrared.\" This brought me to a discussion on Reddit:</p> <p>https://www.reddit.com/r/Coldplay/comments/w7rgth/how_do_the_coldplay_wristbands_work_and_how_would/</p> <p>While scrolling through the discussion, I found a GitHub repository related to PixMob IR reverse engineering:</p> <p>https://github.com/danielweidman/pixmob-ir-reverse-engineering</p> <p>At first, I explored this repo but couldn\u2019t find a direct answer. However, at the bottom of the page, I found another linked repository:</p> <p>Inside this repo, I found a file named PixMob_main.ir and searched for an instance of the yellow color. That\u2019s when I found the correct data stream:</p> <pre><code>1400 1400 700 700 700 700 1400 2800 700 2100 700 700 700 1400 700 1400 1400 2800 1400 2800 70\n</code></pre> <p>This turned out to be the correct answer.</p>"},{"location":"ctf-writeups/bitsctf-2025-writeups/hotpause/#conclusion","title":"Conclusion","text":"<p>This challenge was both fun and difficult, pushing me to think outside the box. It took a lot of trial and error, but I\u2019m happy I was able to solve it\u2014especially since this was my first CTF. One key takeaway from this experience is to not overcomplicate things. Always check the simplest explanations first before diving into more complex solutions.</p>"},{"location":"ctf-writeups/bronco-2025-writeups/theflagishere%21/","title":"theflagishere!","text":"<p>CATEGORY - REVERSING</p>"},{"location":"ctf-writeups/bronco-2025-writeups/theflagishere%21/#introduction","title":"Introduction","text":"<p>In this reversing challenge, I was given a Python compiled <code>.pyc</code> file. The description hinted that the program was supposed to determine the flag, but it didn't explicitly display it. My task was to reverse-engineer the file and extract the correct flag.</p>"},{"location":"ctf-writeups/bronco-2025-writeups/theflagishere%21/#steps","title":"Steps","text":""},{"location":"ctf-writeups/bronco-2025-writeups/theflagishere%21/#step-1-decompiling-the-pyc-file","title":"Step 1: Decompiling the <code>.pyc</code>  file","text":"<p>Since a <code>.pyc</code> file is a compiled Python file, I needed to decompile it back to readable Python code. To do this, I used an online tool: lddgo.net Python Decompiler. I uploaded the <code>.pyc</code> file, and it provided me with the following Python script:</p>"},{"location":"ctf-writeups/bronco-2025-writeups/theflagishere%21/#step-2-identifying-issues-in-the-code","title":"Step 2: Identifying Issues in the Code","text":"<p>After analyzing the decompiled code, I noticed a few issues:</p> <ul> <li>The <code>what_do_i_do</code> function contained a <code>return</code> inside a loop that would never execute properly.</li> <li>There were several unnecessary function calls that seemed misleading.</li> <li>Some of the flag extraction logic seemed obfuscated but could be simplified</li> </ul> <p>I corrected the function:</p> <pre><code>def what_do_i_do(whoKnows):\n    a_st = {}\n    for a in whoKnows:\n        if a not in a_st:\n            a_st[a] = 1\n        else:\n            a_st[a] += 1\n\n    variable_name = 0\n    not_a_variable_name = None\n    for a in a_st:\n        if a_st[a] &gt; variable_name:\n            not_a_variable_name = a\n            variable_name = a_st[a]\n\n    return (not_a_variable_name, variable_name)\n</code></pre>"},{"location":"ctf-writeups/bronco-2025-writeups/theflagishere%21/#step-3-extracting-the-flag","title":"Step 3: Extracting the Flag","text":"<p>After fixing the logic, I reconstructed the flag by calling the appropriate functions in sequence:</p> <pre><code># Construct the flag\nflag = (\n    char_0() + char_1_4_6() + char_2_5_9() + char_3() +\n    char_1_4_6() + char_2_5_9() + char_1_4_6() + char_7() +\n    char_8() + char_2_5_9() + char_10()\n)\n\nprint(\"Extracted flag: bronco{\" + flag + \"}\")\n</code></pre> <p>Running the script printed the final flag:</p> <pre><code>flag: bronco{i_am_a_flag}\n</code></pre> <p>That\u2019s how I solved this challenge. Thanks for reading!</p>"},{"location":"ctf-writeups/byuctf-2025-writeups/universal-ty/","title":"Universal-ty","text":"<p>CATEGORY - OSINT</p>"},{"location":"ctf-writeups/byuctf-2025-writeups/universal-ty/#tldr","title":"TL;DR","text":"<p>The challenge asked for the university Cameron Snider visited before choosing BYU. The image provided didn't contain useful metadata, and AI tools gave misleading results. Through manual visual analysis and reverse image searching, I identified a unique building that led me to the DeBartolo Performing Arts Center. Cross-referencing the location confirmed it was at the University of Notre Dame. I submitted the flag and it was correct.</p>"},{"location":"ctf-writeups/byuctf-2025-writeups/universal-ty/#solution","title":"Solution","text":""},{"location":"ctf-writeups/byuctf-2025-writeups/universal-ty/#step-1-checking-the-image-metadata","title":"Step 1: Checking the Image Metadata","text":"<p>Since this was a classic OSINT/location-identification challenge, the first step was to check the image metadata using <code>exiftool</code>.</p> <p>Unfortunately, the image contained no useful metadata.</p>"},{"location":"ctf-writeups/byuctf-2025-writeups/universal-ty/#step-2-ai-image-location-detection","title":"Step 2: AI Image Location Detection","text":"<p>I used the AI tool Find Picture Location &amp; Identify Photo Location Using AI to analyze the image.</p> <p>The tool was 90% confident that the image was taken at the Reva and David Logan Center for the Arts. However, comparing it to Google Maps revealed the architecture didn\u2019t match, so I ruled it out.</p>"},{"location":"ctf-writeups/byuctf-2025-writeups/universal-ty/#step-3-manual-visual-analysis","title":"Step 3: Manual Visual Analysis","text":"<p>With the AI results proving unreliable, I moved on to manual image analysis. I looked for unique architectural features that stood out.</p> <p>I cropped the prominent structure and ran it through reverse image search.</p>"},{"location":"ctf-writeups/byuctf-2025-writeups/universal-ty/#step-4-reverse-image-search-hit","title":"Step 4: Reverse Image Search Hit","text":"<p>The search returned a promising result: a blog post titled Jax Stumpes: South Bend, IN (10/30/2015).</p> <p>Scrolling through the post, I found an image that matched the architecture \u2014 the DeBartolo Performing Arts Center.</p>"},{"location":"ctf-writeups/byuctf-2025-writeups/universal-ty/#step-5-verifying-the-location","title":"Step 5: Verifying the Location","text":"<p>I checked the DeBartolo Performing Arts Center on Google Maps. The structure matched the image provided in the challenge.</p> <p>To confirm, I analyzed the intersection seen in the challenge photo. I tested multiple intersections and confirmed the correct one based on angle and structure alignment.</p> <p>I did a final cross-reference between the Google Maps view and the challenge image.</p>"},{"location":"ctf-writeups/byuctf-2025-writeups/universal-ty/#step-6-identifying-the-university","title":"Step 6: Identifying the University","text":"<p>I searched \u201cWhat university is DeBartolo Performing Arts Center in?\u201d and confirmed it was part of the University of Notre Dame.</p>"},{"location":"ctf-writeups/byuctf-2025-writeups/universal-ty/#final-flag","title":"Final Flag","text":"<pre><code>byuctf{University_of_Notre_Dame}\n</code></pre>"},{"location":"ctf-writeups/byuctf-2025-writeups/universal-ty/#notes","title":"Notes","text":"<ul> <li>Exiftool: Good to try first, but may not always yield results.</li> <li>AI Tools: Useful for ideas, but always verify \u2014 they can be wrong.</li> <li>Manual Analysis: Pay attention to unique architecture and road layouts.</li> <li>Reverse Image Search: Very effective when cropping key features.</li> <li>Cross-Referencing Maps: Use Google Maps\u2019 angles and intersections to verify locations.</li> </ul>"},{"location":"ctf-writeups/citctf-2025-writeups/no-country-for-old-keys/","title":"No Country for Old Keys","text":"<p>CATEGORY - OSINT</p>"},{"location":"ctf-writeups/citctf-2025-writeups/no-country-for-old-keys/#tldr","title":"TL;DR","text":"<p>The challenge asks for Anthony McConnolly's API key. After searching for his online presence and using tools like Sherlock to find additional accounts, I discovered his GitHub profile. I then found a hardcoded API key in a GitHub repository and submitted it successfully.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/no-country-for-old-keys/#solution","title":"Solution","text":""},{"location":"ctf-writeups/citctf-2025-writeups/no-country-for-old-keys/#step-1-investigating-anthony-mcconnolly","title":"Step 1: Investigating Anthony McConnolly","text":"<p>The challenge asks for Anthony McConnolly's API key, so my first step was to search for his name online. A quick Google search led me to his LinkedIn profile:</p> <p>Unfortunately, there wasn't much information there, so I decided to use Sherlock, a tool for finding social media accounts associated with a username. I used the LinkedIn slug and ran Sherlock, but got no useful results.</p> <p>Next, I decided to check X (Twitter), a popular platform for developers, to see if Anthony McConnolly had an account there. After searching, I found his profile:</p> <p>Although there was no immediate useful information in his posts, I gained another potential username: antmcconn.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/no-country-for-old-keys/#step-2-using-sherlock-again","title":"Step 2: Using Sherlock Again","text":"<p>With the new username antmcconn, I ran Sherlock again. This time, I found several results:</p> <pre><code>[*] Checking username antmcconn on:\n\n[+] AllMyLinks: https://allmylinks.com/antmcconn\n[+] Freelance.habr: https://freelance.habr.com/freelancers/antmcconn\n[+] GNOME VCS: https://gitlab.gnome.org/antmcconn\n[+] GitHub: https://www.github.com/antmcconn\n[+] LibraryThing: https://www.librarything.com/profile/antmcconn\n[+] Mydramalist: https://www.mydramalist.com/profile/antmcconn\n[+] NationStates Nation: https://nationstates.net/nation=antmcconn\n[+] NationStates Region: https://nationstates.net/region=antmcconn\n[+] Spotify: https://open.spotify.com/user/antmcconn\n[+] TorrentGalaxy: https://torrentgalaxy.to/profile/antmcconn\n[+] Twitter: https://x.com/antmcconn\n[+] YandexMusic: https://music.yandex/users/antmcconn/playlists\n\n[*] Search completed with 12 results\n</code></pre> <p>Among these results, the GitHub account caught my attention, so I clicked the link:</p>"},{"location":"ctf-writeups/citctf-2025-writeups/no-country-for-old-keys/#step-3-finding-the-api-key","title":"Step 3: Finding the API Key","text":"<p>On his GitHub profile, there was only one repository. I opened the repository and checked the code. In the main.c file, I found the following line:</p> <pre><code>#define API_KEY \"YOUR_API_KEY_HERE\"\n</code></pre> <p>To investigate further, I checked the History of the file to see if an actual API key was previously hard-coded. After browsing through the file history, I found this:</p> <pre><code>#define API_KEY \"ap9gt04qtxcqfin9\"\n</code></pre>"},{"location":"ctf-writeups/citctf-2025-writeups/no-country-for-old-keys/#step-4-submitting-the-flag","title":"Step 4: Submitting the Flag","text":"<p>I submitted the API key: ap9gt04qtxcqfin9. The flag was accepted!</p>"},{"location":"ctf-writeups/citctf-2025-writeups/no-country-for-old-keys/#final-flag","title":"Final Flag","text":"<pre><code>ap9gt04qtxcqfin9\n</code></pre>"},{"location":"ctf-writeups/citctf-2025-writeups/no-country-for-old-keys/#notes","title":"Notes","text":"<ul> <li>Sherlock Tool: Useful for finding social media profiles based on usernames.</li> <li>GitHub Repository: Always check the file history for potential sensitive information like hard-coded API keys.</li> <li>Keep an Eye on Comments: Sometimes, sensitive information can be exposed in comments or file histories, so check the history if needed.</li> </ul>"},{"location":"ctf-writeups/citctf-2025-writeups/throwback-to-the-future/","title":"Throwback to the Future","text":"<p>CATEGORY - OSINT</p>"},{"location":"ctf-writeups/citctf-2025-writeups/throwback-to-the-future/#tldr","title":"TL;DR","text":"<p>What date was Anthony McConnolly's \"throwback\" photo taken? After researching his X (Twitter) account, performing a reverse image search, and identifying key details, I concluded that the photo was taken during a game between the New England Patriots and the Buffalo Bills at Gillette Stadium on October 22, 2023.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/throwback-to-the-future/#solution","title":"Solution","text":""},{"location":"ctf-writeups/citctf-2025-writeups/throwback-to-the-future/#step-1-investigating-the-challenge","title":"Step 1: Investigating the Challenge","text":"<p>Since the challenge is about Anthony McConnolly, I decided to browse through his X (Twitter) account Anthony McConnolly (@antmcconn) / X to find the throwback photo. After a bit of scrolling, I came across this post:</p>"},{"location":"ctf-writeups/citctf-2025-writeups/throwback-to-the-future/#step-2-analyzing-the-photo","title":"Step 2: Analyzing the Photo","text":"<p>After finding the tweet with the photo, I looked closely at the caption. It said:</p> <p>\"#throwback to the 2023 season. The MVP still can\u2019t beat us when we\u2019re at home.\"</p> <ul> <li>The use of \"2023\" clearly indicates that the photo was taken in that year.</li> <li>The word \"season\" suggested that it was a football game, not just an exhibition.</li> </ul> <p>Next, I performed a reverse image search to see if the photo was used elsewhere on the internet. Here are the results:</p> <p>Although the reverse image search didn\u2019t yield any exact matches, I noticed some related search terms that might be useful: \"Gillette Stadium\" and \"New England Patriots.\" I saved these names for later reference.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/throwback-to-the-future/#step-3-identifying-clues-in-the-photo","title":"Step 3: Identifying Clues in the Photo","text":"<p>Upon closer inspection of the photo, I noticed another clue:</p> <p>It seemed to feature another team logo, so I decided to look it up. After searching for the name visible on the uniform, I discovered the second team: Buffalo Bills.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/throwback-to-the-future/#step-4-confirming-the-teams","title":"Step 4: Confirming the Teams","text":"<p>To confirm that these were indeed the correct teams, I did some cross-referencing. I examined the uniforms of both teams. The Buffalo Bills usually wear white uniforms, while the New England Patriots wear darker ones.</p> <p>Note: I am not sure about who the players are in this photo, as I was mainly trying to match the uniforms to confirm the team identities. If I made any mistakes regarding the players, I apologize.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/throwback-to-the-future/#step-5-finding-the-game-date","title":"Step 5: Finding the Game Date","text":"<p><sup>Note for the image above: I\u2019m not entirely sure who the players are currently wearing these uniforms. I\u2019m just trying to match the uniforms to see if the designs align with the photo I was given. If I got the players wrong, my apologies!</sup></p> <p>With the teams confirmed as the New England Patriots and the Buffalo Bills, I searched for more details. I typed \"Patriots vs Bills Gillette Stadium 2023\" into Google and found the game took place on October 22, 2023.</p> <p>Here is the search result:</p>"},{"location":"ctf-writeups/citctf-2025-writeups/throwback-to-the-future/#step-6-converting-the-date-to-mmddyyyy-format","title":"Step 6: Converting the Date to MM/DD/YYYY Format","text":"<p>The date of the game was October 22, 2023. In the required format, this becomes:</p> <p>10/22/2023</p> <p>I submitted this as the flag, and it was accepted.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/throwback-to-the-future/#final-flag","title":"Final Flag","text":"<pre><code>10/22/2023\n</code></pre>"},{"location":"ctf-writeups/citctf-2025-writeups/throwback-to-the-future/#notes","title":"Notes","text":"<ul> <li>Always check related searches in reverse image search for location and teams.</li> <li>Verifying uniform designs helps confirm team identities and season.</li> <li>Image captions can provide immediate year or event clues.</li> </ul>"},{"location":"ctf-writeups/citctf-2025-writeups/timesink/","title":"Timesink","text":"<p>CATEGORY - OSINT</p>"},{"location":"ctf-writeups/citctf-2025-writeups/timesink/#tldr","title":"TL;DR","text":"<p>The challenge asks for the street where a bridge in a YouTube video is located. After analyzing the bridge image, I identified the Little Nestucca River Bridge and confirmed it using coordinates and additional cross-referencing. The correct street is Little Nestucca River Road.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/timesink/#solution","title":"Solution","text":""},{"location":"ctf-writeups/citctf-2025-writeups/timesink/#step-1-analyzing-the-image","title":"Step 1: Analyzing the Image","text":"<p>The first step was to use Google Reverse Image Search on the provided photo of the bridge.</p> <p>The first result was interesting, so I clicked on it:\\ https://weareplaygrounds.nl/lorn-timesink-directed-by-pavel-brenner/</p> <p>After scrolling down, I found a high-quality version of the bridge image.</p> <p>In this version of the image, I zoomed in on a sign and could read \"Nestucca River.\" This gave me a key clue for the next step.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/timesink/#step-2-identifying-the-bridge","title":"Step 2: Identifying the Bridge","text":"<p>My search results led me to a website that described the Little Nestucca River Bridge I, which seemed to match the bridge in the photo.</p> <p>I found the coordinates for the bridge: 45\u00b0 6' 29.98\" N, 123\u00b0 49' 26\" W and plugged these into Google Maps to check if the location was accurate.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/timesink/#step-3-verifying-the-location","title":"Step 3: Verifying the Location","text":"<p>To verify that this was the correct bridge, I cross-referenced the video still with images and information from the BTS of the Timesink music video on Instagram:</p> <p>This gave me additional visual confirmation that the bridge was indeed the correct one.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/timesink/#step-4-confirming-the-street-name","title":"Step 4: Confirming the Street Name","text":"<p>I searched for information on the bridge's street and found that there is a Little Nestucca River Road with a truss bridge, which matched the bridge I was analyzing.</p> <p>I also searched for where Timesink by Lorn was filmed on Google, and this gave me further confirmation that I was on the right track.</p>"},{"location":"ctf-writeups/citctf-2025-writeups/timesink/#step-5-final-flag-submission","title":"Step 5: Final Flag Submission","text":"<p>After confirming the location, I submitted the flag:</p> <pre><code>CIT{little_nestucca_river_rd}\n</code></pre> <p>It was accepted!</p>"},{"location":"ctf-writeups/citctf-2025-writeups/timesink/#final-flag","title":"Final Flag","text":"<pre><code>CIT{little_nestucca_river_rd}\n</code></pre>"},{"location":"ctf-writeups/citctf-2025-writeups/timesink/#notes","title":"Notes","text":"<ul> <li>Reverse Image Search: Helped find a high-quality version of the bridge image, essential for identification.</li> <li>Cross-Referencing: The Behind-the-Scenes (BTS) footage from Timesink was invaluable for confirming the bridge location.</li> <li>Structurae Database: A top resource for structural engineering, with over 85,000 structures and 600,000 publications, it helped verify the bridge details.</li> </ul>"},{"location":"ctf-writeups/pearlctf-2025-writeups/hidden-marker/","title":"Hidden Marker","text":"<p>CATEGORY - OSINT</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/hidden-marker/#introduction","title":"Introduction","text":"<p>A whistleblower using the alias \"spiriteawx\" has revealed a large-scale art smuggling operation, leaking crucial financial documents and leaving behind cryptic hints. The goal of this challenge is to track down the smuggling location and identify the associated transaction.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/hidden-marker/#step-by-step-solution","title":"Step by Step Solution","text":""},{"location":"ctf-writeups/pearlctf-2025-writeups/hidden-marker/#step-1-finding-social-media-accounts","title":"Step 1: Finding Social Media Accounts","text":"<p>Since we have a username, I used Sherlock to check for social media accounts.</p> <p>Result of Sherlock:</p> <pre><code>https://allmylinks.com/spiriteawx\nhttps://www.artstation.com/spiriteawx\nhttps://cults3d.com/en/users/spiriteawx/creations\nhttps://freelance.habr.com/freelancers/spiriteawx\nhttps://gitlab.gnome.org/spiriteawx\nhttps://nationstates.net/nation=spiriteawx\nhttps://nationstates.net/region=spiriteawx\nhttps://torrentgalaxy.to/profile/spiriteawx\nhttps://x.com/spiriteawx\nTotal Websites Username Detected On : 9\n</code></pre> <p>Among these, we found an X account. Checking it revealed the following:</p> <p>A tweet related to major art smuggling contained a link to Pastebin with financial records. The tweet also included an image, which supposedly shows where the smuggling took place.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/hidden-marker/#step-2-identifying-the-location","title":"Step 2: Identifying the Location","text":"<p>To determine the location, I first attempted reverse image searches but found no matches. Assuming the image was taken from Google Maps, I decided to use my favorite tool, Find Picture Location &amp; Identify Photo Location Using AI.</p> <p>This led me to a possible location: Prague, Czech Republic.</p> <p>I then manually searched the map for about 30 minutes, but the area was too vast to check every street. Upon closer examination of the provided image, I noticed a vintage car, which stood out. This suggested it could be a known attraction. Searching for 'Prague Czech vintage cars location' on Google helped narrow it down.</p> <p>The first result in Google Maps provided the answer.</p> <p>FOUND IT! The street name is 'Celetna'. This gave me half of the flag.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/hidden-marker/#step-3-finding-the-transaction-id","title":"Step 3: Finding the Transaction ID","text":"<p>Now, I needed to extract the transaction ID from the financial records. The logs contained over 1000 entries, and I had only 500 attempts to find the correct one.</p> <p>After skimming through the data, I found suspicious entries such as:</p> <pre><code>\"UserId\",\"TransactionId\",\"TransactionTime\",\"ItemCode\",\"NumberOfItemsPurchased\",\"CostPerItem\"\n\n\"309960\",\"5988543\",\"Wed May 02 10:36:00 IST 2023\",\"469644\",\"3067248\",\"4.08\"\n\"321426\",\"6268163\",\"Tue Dec 18 08:56:00 IST 2023\",\"459921\", BACK DOOR ,\"72\"\n...\n537. \"-1\",\"-1\",\"[REDACTED BY ADMIN]\",\"-1\",\"-1\", \"-1\"\n</code></pre> <p>After 12 failed attempts with different transaction IDs, I became suspicious of the redacted entry:</p> <p><code>\"-1\",\"-1\",\"[REDACTED BY ADMIN]\",\"-1\",\"-1\", \"-1\"</code></p> <p>I was initially confused as to why it was censored. Scrolling further, I found a comment in the Pastebin log:</p> <p><code>It was there. I swear!</code> - ArmoredVortex</p> <p>This suggested that the log had been edited. If the original data had been altered, I needed to find an earlier version. Searching for \"ArmoredVortex\" and \"spiriteawx\" using Sherlock yielded nothing useful, so my last resort was the Wayback Machine.</p> <p>Using the Wayback Machine:</p> <p>Bingo! The redacted entry at line <code>537</code> was visible in an earlier version:</p> <pre><code>\"845921\",\"6382938\",\"Sat Jan 07 00:00:00 IST 2024\",\"372819\",\"7\", \"3.21\"\n</code></pre>"},{"location":"ctf-writeups/pearlctf-2025-writeups/hidden-marker/#flag","title":"FLAG","text":"<pre><code>pearl{celetna_6382938}\n</code></pre>"},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/","title":"SentMail","text":"<p>CATEGORY - FORENSICS</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/#introduction","title":"Introduction","text":"<p>Vortex prefers simplicity, but iamgreedy. I want more\u2014(text &amp; background), they don\u2019t tell the whole story. Have you checked the footer? And don't forget, there's something unique about the file name. It might just be the key.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/#step-by-step-solution","title":"Step by Step Solution","text":""},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/#step-1-checking-metadata","title":"Step 1: Checking Metadata","text":"<p>Since this is a PDF file, I started with some basic forensic techniques. The first tool I used was <code>exiftool</code> to extract metadata.</p> <pre><code>exiftool sentmail.pdf\n</code></pre> <p>Unfortunately, nothing useful was found.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/#step-2-inspecting-the-pdf-in-a-browser","title":"Step 2: Inspecting the PDF in a Browser","text":"<p>Next, I opened the PDF in my browser and carefully examined it. The challenge description suggested looking at the footer. Translating the Morse code in the footer revealed a YouTube link, but the link was expired.</p> <p>To retrieve the original content, I used the Wayback Machine. The archived link led to a Rickroll. Classic.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/#step-3-extracting-hidden-text","title":"Step 3: Extracting Hidden Text","text":"<p>Since the PDF allowed highlighting invisible text, I suspected hidden content. Copying and pasting the text revealed two hidden messages:</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/#first-hidden-message","title":"First Hidden Message","text":"<pre><code>Science ReportLorem ipsum dolor sit amet, consectetuer adipiscing elit\nSixEight SevenFour SevenFour SevenZero SevenThree Threea Twof Twof SevenNine\nSixf SevenFive SevenFour SevenFive Twoe SixTwo SixFive Twof SevenEight SevenSix\nFourSix Fivea Sixa Sixf ThreeFive FiveZero SixSeven FourSeven ThreeZero\n</code></pre>"},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/#second-hidden-message","title":"Second Hidden Message","text":"<pre><code>*##*#****###*#***###*#***###*****###**##**###*#***#*####**#*####*####**#*\n##*####*###*#*#*###*#***###*#*#**#*###**##***#**##**#*#**#*####*####****\n###*##**#***##**#*##*#**##*#*#**##*####**##*#*#*#*#*****##**###*#***###**#\n#****\n</code></pre>"},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/#decoding-the-messages","title":"Decoding the Messages","text":"<ul> <li>The first message was a hexadecimal string that, when translated, revealed the same Rickroll YouTube link.</li> </ul> <ul> <li>The second message was binary encoded using <code>* = 0</code> and <code># = 1</code>. Once decoded, it also pointed to the Rickroll link.</li> </ul> <p>At this point, it was clear that the PDF was full of distractions. Time to dig deeper.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/#step-4-analyzing-the-pdf-structure","title":"Step 4: Analyzing the PDF Structure","text":"<p>To check for any hidden content or embedded files, I used <code>pdf-parser</code>.</p> <pre><code>pdf-parser sentmail.pdf\n</code></pre> <p>Scrolling through the results, I found an interesting reference:</p> <p>It showed <code>flag.txt</code> embedded in object 3 0 R.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/#step-5-extracting-the-flag","title":"Step 5: Extracting the Flag","text":"<p>Since <code>flag.txt</code> was stored within object 3, I extracted it using:</p> <pre><code>pdf-parser sentmail.pdf -o 3 -f -d flag.txt\n</code></pre> <p>After extraction:</p> <p>The extracted file contained the final flag!</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/sentmail/#flag","title":"FLAG","text":"<pre><code>pearl{I_N3v3r_Kn3w_PDF5_Att4ch}\n</code></pre>"},{"location":"ctf-writeups/pearlctf-2025-writeups/van-gogh%27s-garbage-hunt/","title":"Van Gogh's GARBAGE hunt","text":"<p>CATEGORY - OSINT</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/van-gogh%27s-garbage-hunt/#introduction","title":"Introduction","text":"<p>Helga, a maid working at Mr. X\u2019s mansion, made a huge mistake\u2014she unknowingly gave away his gold jewelry along with some old clothes. Now, she has no idea which textile collection point she left them at.</p> <p>Our job? Track down the exact shop where the jewelry ended up and retrieve the flag.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/van-gogh%27s-garbage-hunt/#step-by-step-solution","title":"Step by Step Solution","text":""},{"location":"ctf-writeups/pearlctf-2025-writeups/van-gogh%27s-garbage-hunt/#step-1-inspecting-the-given-file","title":"Step 1: Inspecting the Given File","text":"<p>The challenge provided a file: <code>vangogh.zip</code>. Unzipping it gave me a single image file:</p> <p>I started by checking the metadata using <code>exiftool</code>.</p> <pre><code>exiftool chall.jpeg\n</code></pre> <p>The comment field contained something that looked like Base64-encoded text.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/van-gogh%27s-garbage-hunt/#step-2-decoding-the-hidden-string","title":"Step 2: Decoding the Hidden String","text":"<p>The extracted Base64 string was:</p> <pre><code>SnVzdGFub3JtYTgxODYx\n</code></pre> <p>I decoded it using:</p> <pre><code>echo \"SnVzdGFub3JtYTgxODYx\" | base64 -d\n</code></pre> <p>Which gave me:</p> <pre><code>Justanorma81861\n</code></pre> <p>Looks like a username.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/van-gogh%27s-garbage-hunt/#step-3-investigating-the-username","title":"Step 3: Investigating the Username","text":"<p>I used <code>sherlock</code> to find where this username exists online.</p> <pre><code>sherlock Justanorma81861\n</code></pre> <pre><code>https://freelance.habr.com/freelancers/Justanorma81861\nhttps://gitlab.gnome.org/Justanorma81861\nhttps://nationstates.net/nation=Justanorma81861\nhttps://nationstates.net/region=Justanorma81861\nhttps://torrentgalaxy.to/profile/Justanorma81861\nhttps://x.com/Justanorma81861\nTotal Websites Username Detected On : 7\n</code></pre> <p>The X (Twitter) account stood out, so I checked it.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/van-gogh%27s-garbage-hunt/#step-4-checking-the-x-account","title":"Step 4: Checking the X account","text":"<p>The profile had only two tweets. One contained another Base64-encoded string:</p> <pre><code>QjQ6NUQ6NTA6QUE6ODY6NDE=\n</code></pre> <p>I decoded it:</p> <pre><code>echo \"QjQ6NUQ6NTA6QUE6ODY6NDE=\" | base64 -d\n</code></pre> <p>Result:</p> <pre><code>B4:5D:50:AA:86:41\n</code></pre> <p>This looked like a BSSID (Wi-Fi MAC address).</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/van-gogh%27s-garbage-hunt/#step-5-searching-for-the-bssid","title":"Step 5: Searching for the BSSID","text":"<p>I searched for the BSSID on <code>wigle.net</code> to get its location.</p> <p>It pointed to His Majesty\u2019s Theatre, so I checked Google Maps.</p> <p>The location didn\u2019t seem right. I decided to try reverse image searching the original <code>chall.jpeg</code>.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/van-gogh%27s-garbage-hunt/#step-6-reverse-image-search","title":"Step 6: Reverse Image Search","text":"<p>I uploaded <code>chall.jpeg</code> to Google Lens and found a match.</p> <p>Clicking the third link gave me this address:</p> <pre><code>Buiten Oranjestraat 14-A\n</code></pre> <p>I looked it up on Google Maps.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/van-gogh%27s-garbage-hunt/#step-7-identifying-the-shop","title":"Step 7: Identifying the Shop","text":"<p>From the challenge description:</p> <p>Helga, a maid at Mr. X\u2019s mansion, mistakenly gave away his gold jewelry to some textile collection point along with a pile of old clothes thinking they were GARBAGE.</p> <p>The clue pointed to a textile collection point.</p> <p>There was a store nearby called \"The Swapshop\", which fit perfectly.</p>"},{"location":"ctf-writeups/pearlctf-2025-writeups/van-gogh%27s-garbage-hunt/#flag","title":"FLAG","text":"<pre><code>pearl{the_swapshop}\n</code></pre>"},{"location":"htb-writeups/machines/codetwo/writeup/","title":"CodeTwo \u2013 Writeup","text":""},{"location":"htb-writeups/machines/codetwo/writeup/#overview","title":"Overview","text":"<ul> <li>Machine Name: CodeTwo</li> <li>IP Address: 10.10.11.82</li> <li>Difficulty: Easy</li> <li>OS: Linux</li> </ul>"},{"location":"htb-writeups/machines/codetwo/writeup/#enumeration","title":"Enumeration","text":"<p>The initial step in any penetration test is to perform a port scan to identify open services and potential entry points. I used nmap with a comprehensive set of flags to gather detailed information.</p> <pre><code>nmap -sV -sC -vv -T4 -oA nmap/codetwo 10.10.11.82\n</code></pre> <p>The scan results revealed three open ports:</p> <ul> <li>Port 22 (SSH): Running OpenSSH 8.2p1, which is a relatively recent version and unlikely to be vulnerable to common exploits. This will likely require credentials.</li> <li>Port 8000 (HTTP): Running Gunicorn 20.0.4. The website's title, \"Welcome to CodeTwo,\" indicates a custom web application.</li> <li>Port 8080 (HTTP): Running SimpleHTTPServer 0.6 (Python 3.8.10), which is a basic web server often used for file hosting.</li> </ul> <p>With multiple web services available, the next logical step was to investigate ports 8000 and 8080.</p> <p>To respect the HTB rules, I\u2019m only sharing the enumeration phase for now. \ufe0fFull writeup will be released after the machine\u2019s retirement.</p>"},{"location":"htb-writeups/machines/planning/writeup/","title":"Planning \u2013 Writeup","text":""},{"location":"htb-writeups/machines/planning/writeup/#overview","title":"Overview","text":"<ul> <li>Machine Name: Planning</li> <li>IP Address: 10.10.11.68</li> <li>Difficulty: Easy</li> <li>OS: Linux</li> <li>Provided Credentials: admin / 0D5oT70Fq13EvB5r</li> </ul>"},{"location":"htb-writeups/machines/planning/writeup/#enumeration","title":"Enumeration","text":"<p>As in a real-world scenario, the engagement began with provided credentials. The initial step was to perform a comprehensive port scan on the target machine.</p> <pre><code>sudo nmap -sV -sC -vv -T4 -oA nmap/planning 10.10.11.68\n</code></pre> <p>The nmap scan revealed two open ports:</p> <ul> <li> <p>Port 22 (SSH): Running OpenSSH 9.6p1. This version is relatively recent and did not appear to have any public exploits.</p> </li> <li> <p>Port 80 (HTTP): Running nginx 1.24.0. The scan results indicated a redirect to <code>http://planning.htb/</code>.</p> </li> </ul> <p>After failing to find a login page on the main site, I performed a virtual host (vhost) fuzzing attack to discover hidden subdomains. This method is often more efficient than a full directory brute-force.</p> <p>I used bffuf, a custom wrapper script for ffuf. The script is available on GitHub.</p> <pre><code>bffuf vhost http://planning.htb /usr/share/wordlists/seclists/Discovery/DNS/services-names.txt -fc 301 -or vhosts.txt\n</code></pre> <p>The scan quickly identified a new subdomain, grafana.planning.htb, which was added to my <code>/etc/hosts</code> file to allow access.</p> <p>To respect the HTB rules, I\u2019m only sharing the enumeration phase for now. \ufe0fFull writeup will be released after the machine\u2019s retirement.</p>"},{"location":"osint-writeups/gralhix/027/","title":"Exercise #027 (Easy)","text":""},{"location":"osint-writeups/gralhix/027/#challenge-overview","title":"Challenge Overview","text":"<p>You're presented with an image featuring a group of individuals seated before a large screen displaying the phrase \u201cLectura en Movimiento en Lima.\u201d On the left side of the image, a speaker is standing near three prominent flags.</p>"},{"location":"osint-writeups/gralhix/027/#your-objectives-are-to","title":"Your objectives are to:","text":"<ul> <li>a) Determine the identity of the speaker.</li> <li>b) Identify what is pinned to his lapel.</li> <li>c) Locate a video recording of his speech.</li> </ul> <p>Link to the original challenge: osint-exercise-027</p>"},{"location":"osint-writeups/gralhix/027/#difficulty-level","title":"Difficulty Level","text":"<ul> <li>Beginners: a) Easy    b) Easy    c) Easy</li> <li>Experts: a) Easy    b) Easy    c) Easy</li> </ul>"},{"location":"osint-writeups/gralhix/027/#image","title":"Image","text":"<p>Note: I did not take this photo or own the rights for it.It is only here to be used for educational purposes.</p>"},{"location":"osint-writeups/gralhix/027/#steps","title":"Steps","text":""},{"location":"osint-writeups/gralhix/027/#solving-letter-a-identifying-the-speaker","title":"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f Solving Letter A: Identifying the Speaker","text":"<p>To figure out who the speaker was, I began with a reverse image search using the provided photo. </p> <p>This led me to a LinkedIn post related to the event:\\ https://es.linkedin.com/posts/juan-carlos-ruiz-rodriguez-b5252a83_oei-per%C3%BA-noticias-lectura-en-movimiento-activity-7087590628762509312-hY1a?trk=public_profile_share_view</p> <p>When I clicked on the link, I found another image of the event. In that image, I noticed a man in the center wearing the same outfit as the one in the original photo provided in the exercise.</p> <p>I did a bit of cross-referencing, and found a name mentioned in the post: Juan Carlos Ruiz Rodriguez.</p> <p>To confirm his identity, I searched online using the keywords:\\ &amp;#xNAN;\"Lectura en Movimiento en Lima\" and \"Juan Carlos Ruiz\"</p> <p>After checking the results and verifying the context, I was confident that the speaker in the original photo is indeed:\\ &amp;#xNAN;\u27a1\ufe0f Juan Carlos Ruiz</p> <p>That completes part a of the task!</p>"},{"location":"osint-writeups/gralhix/027/#solving-letter-b-identifying-whats-on-his-lapel","title":"\ud83d\udd0d Solving Letter B: Identifying What\u2019s on His Lapel","text":"<p>To find out what was pinned to the speaker\u2019s lapel, I continued my search using the same keywords:\\ &amp;#xNAN;\"Lectura en Movimiento en Lima\" and \"Juan Carlos Ruiz\"</p> <p>This led me to a helpful article on Infobae:\\ https://www.infobae.com/america/agencias/2023/07/19/peru-y-la-oei-promocionan-la-lectura-en-las-calles-y-el-transporte-publico-de-lima/</p> <p></p> <p>The article included a close-up shot of Juan Carlos Ruiz. In that image, I was able to clearly see the badge on his lapel. It had the text:\\ &amp;#xNAN;\u27a1\ufe0f OEI \u2014 confirming it was an OEI badge pinned to his jacket.</p> <p>And with that, part b is complete!</p>"},{"location":"osint-writeups/gralhix/027/#solving-letter-c-finding-footage-of-his-speech","title":"\ud83c\udfa5 Solving Letter C: Finding Footage of His Speech","text":"<p>To locate a video of the speech, I searched for:\\ &amp;#xNAN;\"Lectura en Movimiento en Lima\" on YouTube and other video platforms.</p> <p></p> <p>I went through the results and watched several videos, checking each one for any clips featuring Juan Carlos Ruiz.</p> <p>Eventually, I found the right footage where he appears and speaks at the event. Here\u2019s the video I found on YouTube:\\ \ud83d\udcfa https://www.youtube.com/watch?v=cmpsALc_EGU</p> <p></p> <p>That confirmed and completed part c of the challenge!</p>"},{"location":"osint-writeups/gralhix/027/#answer","title":"Answer","text":"<p>A: Juan Carlos Ruiz Rodriguez\\ B: OEI badge\\ C: https://www.youtube.com/watch?v=cmpsALc_EGU</p>"},{"location":"osint-writeups/gralhix/027/#huge-thanks","title":"Huge Thanks \ud83d\ude4c","text":"<p>A huge thanks to Sofia Santos for providing such great and free OSINT challenges through Gralhix!</p>"},{"location":"picoctf-writeups/forensics/bitlocker-1-to-2/writeup/","title":"Bitlocker \u2013 Writeup","text":""},{"location":"picoctf-writeups/forensics/bitlocker-1-to-2/writeup/#bitlocker-1","title":"Bitlocker-1","text":""},{"location":"picoctf-writeups/forensics/bitlocker-1-to-2/writeup/#overview","title":"Overview","text":"<p>Challenge Name: Bitlocker-1 Difficulty: Medium Category: Forensics Challenge Description:  </p> <p>Jacky is not very knowledgeable about the best security passwords and used a simple password to encrypt their BitLocker drive. See if you can break through the encryption!  </p>"},{"location":"picoctf-writeups/forensics/bitlocker-1-to-2/writeup/#steps","title":"Steps","text":"<p>Downloaded the provided disk image file: <code>bitlocker-1.dd</code> </p> <p>Ran a file check:  </p> <pre><code>file bitlocker-1.dd\n</code></pre> <p>Result:  </p> <pre><code>bitlocker-1.dd: DOS/MBR boot sector, code offset 0x58+2, OEM-ID \"-FVE-FS-\", sectors/cluster 8, reserved sectors 0, Media descriptor 0xf8, sectors/track 63, heads 255, hidden sectors 124499968, FAT (32 bit), sectors/FAT 8160, serial number 0, unlabeled; NTFS, sectors/track 63, physical drive 0x1fe0, $MFT start cluster 393217, serial number 02020454d414e204f, checksum 0x41462020\n</code></pre> <p>The output shows <code>OEM-ID \"-FVE-FS-\"</code>, meaning Full Volume Encrypted File System (BitLocker). It also indicates <code>NTFS</code>, confirming it\u2019s a Windows disk image.  </p> <p>Tried mounting it:  </p> <p> </p> <p>Mounting failed. Based on the challenge description, this is about cracking a weak password. A quick search showed dislocker | Kali Linux Tools is useful for BitLocker, but a password is still required. Another tool is john | Kali Linux Tools with <code>bitlocker2john</code>.  </p> <p>Extracted hash:  </p> <pre><code>bitlocker2john -i bitlocker-1.dd &gt; hash\n</code></pre> <p>Trimmed to just the User Password hash:  </p> hash<pre><code>User Password hash:\n$bitlocker$0$16$cb4809fe9628471a411f8380e0f668db$1048576$12$d04d9c58eed6da010a000000$60$68156e51e53f0a01c076a32ba2b2999afffce8530fbe5d84b4c19ac71f6c79375b87d40c2d871ed2b7b5559d71ba31b6779c6f41412fd6869442d66d\n</code></pre> <p>Cracked it using <code>john</code>:  </p> <pre><code>john --wordlist=/usr/share/wordlists/rockyou.txt hash\n</code></pre> <p>Result:  </p> <pre><code>jacqueline       (?)\n</code></pre> <p>Password found: <code>jacqueline</code>.  </p> <p>Next, used <code>dislocker</code> to decrypt and mount:  </p> <pre><code>sudo -s\ndislocker bitlocker-1.dd /tmp/drive --user-password=jacqueline\n</code></pre> <p>This produced <code>dislocker-file</code>. Checked it:  </p> <pre><code>file dislocker-file\n</code></pre> <p>Result:  </p> <pre><code>dislocker-file: DOS/MBR boot sector, code offset 0x52+2, OEM-ID \"NTFS    \", sectors/cluster 8, Media descriptor 0xf8, sectors/track 63, heads 255, hidden sectors 124499968, dos &lt; 4.0 BootSector (0x80), FAT (1Y bit by descriptor); NTFS, sectors/track 63, sectors 204799, $MFT start cluster 8533, $MFTMirror start cluster 2, bytes/RecordSegment 2^(-1*246), clusters/index block 1, serial number 0804e24974e2487cc; contains bootstrap BOOTMGR\n</code></pre> <p>Created a mount point and mounted it:  </p> <pre><code>mkdir /tmp/bit\nmount -o loop dislocker /tmp/bit\n</code></pre> <p>Result:  </p> <pre><code>The disk contains an unclean file system (0, 0).\nMetadata kept in Windows cache, refused to mount.\nFalling back to read-only mount because the NTFS partition is in an\nunsafe state. Please resume and shutdown Windows fully (no hibernation\nor fast restarting.)\nCould not mount read-write, trying read-only\n</code></pre> <p>Despite the warning, the filesystem mounted read-only. Navigating to <code>/tmp/bit</code> revealed <code>flag.txt</code>:  </p> <p> </p>"},{"location":"picoctf-writeups/forensics/bitlocker-1-to-2/writeup/#flags","title":"Flags","text":"<pre><code>picoCTF{us3_b3tt3r_p4ssw0rd5_pl5!_3242adb1}\n</code></pre>"},{"location":"picoctf-writeups/forensics/bitlocker-1-to-2/writeup/#summary","title":"Summary","text":"<p>The challenge revolved around recognizing BitLocker encryption (<code>-FVE-FS-</code>), extracting the user password hash with <code>bitlocker2john</code>, cracking it with <code>john</code>, and finally using <code>dislocker</code> to mount the decrypted volume. A weak password led directly to the flag.  </p>"},{"location":"picoctf-writeups/forensics/bitlocker-1-to-2/writeup/#bitlocker-2","title":"Bitlocker-2","text":"<p>This section is still in progress \u2014 I will update it once I finish solving the Bitlocker-2 challenge.</p>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/","title":"DISKO 1 to 3 - Writeup","text":""},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#disko-1","title":"DISKO 1","text":""},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#overview","title":"Overview","text":"<p>Challenge Name: DISKO 1</p> <p>Difficulty: Easy</p> <p>Category: Forensics</p> <p>Challenge Description:</p> <p>Can you find the flag in this disk image?</p>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#steps","title":"Steps","text":"<p>The provided file <code>disko-1.dd.gz</code> is a compressed disk image. The first step is to decompress it to access its contents. This can be done using the <code>gunzip</code> command.</p> <pre><code>gunzip disko-1.dd.gz\n</code></pre> <p>Next, the <code>file</code> command is used to identify the type of the extracted disk image <code>disko-1.dd</code>.</p> <pre><code>file disko-1.dd\n</code></pre> <p>The output reveals that it is a DOS/MBR boot sector with a FAT32 file system. While the challenge involves a disk image, a common and efficient first step in forensics challenges is to check if the flag can be found as a plain string within the file. This can be achieved using the <code>strings</code> command, which extracts printable characters from a file.</p> <p>The <code>strings</code> command is piped to <code>grep</code> to filter for the string \"pico,\" which is a common substring in picoCTF flags.</p> <pre><code>strings disko-1.dd | grep -i 'pico'\n</code></pre> <p>The output of the command is shown below.</p> <pre><code>_ZN13QsciScintilla10apiContextEiRiS0_\n:/icons/appicon\nPICONV\n# $Id: piconv,v 2.8 2016/08/04 03:15:58 dankogai Exp $\npiconv -- iconv(1), reinvented in perl\n\u00a0 piconv [-f from_encoding] [-t to_encoding]\n\u00a0 piconv -l\n\u00a0 piconv -r encoding_alias\n\u00a0 piconv -h\nB&lt;piconv&gt; is perl version of B&lt;iconv&gt;, a character encoding converter\na technology demonstrator for Perl 5.8.0, but you can use piconv in the\npiconv converts the character encoding of either STDIN or files\nTherefore, when both -f and -t are omitted, B&lt;piconv&gt; just acts\npicoCTF{1t5_ju5t_4_5tr1n9_be6031da}\nruntime.(*piController).reset\nruntime.(*piController).next\ntype:runtime.piController\ntype:oDpiCOiQ\n</code></pre> <p>Analyzing the results, the string <code>picoCTF{1t5_ju5t_4_5tr1n9_be6031da}</code> is clearly visible. This is the flag for the challenge. While a full forensic analysis of the disk image could have been performed using tools like <code>foremost</code> or <code>autopsy</code>, a simple <code>strings</code> command was sufficient to solve the challenge.</p>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#flags","title":"Flags","text":"<pre><code>picoCTF{1t5_ju5t_4_5tr1n9_be6031da}\n</code></pre>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#summary","title":"Summary","text":"<p>The challenge <code>DISKO 1</code> required us to find the flag within a disk image. The solution was straightforward as the flag was stored as a plain string within the file. We used the <code>gunzip</code> command to decompress the provided file and then used the <code>strings</code> utility to extract the flag. The <code>strings</code> command is often a very effective and fast method to check for flags in binary files and disk images before resorting to more complex forensic tools.</p>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#disko-2","title":"DISKO 2","text":""},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#overview_1","title":"Overview","text":"<p>Challenge Name: DISKO 2</p> <p>Difficulty: Medium</p> <p>Category: Forensics</p> <p>Challenge Description:</p> <p>Can you find the flag in this disk image? The right one is Linux! One wrong step and its all gone!</p>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#steps_1","title":"Steps","text":"<p>The provided file <code>disko-2.dd.gz</code> is a compressed disk image. The first step is to decompress it using <code>gunzip</code>.</p> <pre><code>gunzip disko-2.dd.gz\n</code></pre> <p>Next, we can examine the file type and partitions using the <code>file</code> command.</p> <pre><code>file disko-2.dd\n</code></pre> <p>The output indicates that the disk image contains two partitions, with IDs <code>0x83</code> (Linux) and <code>0xb</code> (W95 FAT32).</p> <p>To get a more detailed view of the partitions, we use the <code>fdisk</code> utility with the <code>-l</code> (list) flag.</p> <pre><code>fdisk -l disko-2.dd\n</code></pre> <p>The <code>fdisk</code> output confirms the presence of two partitions, <code>disko-2.dd1</code> (Linux) and <code>disko-2.dd2</code> (W95 FAT32). The challenge description specifically states, \"The right one is Linux! One wrong step and its all gone!\" This indicates that we should focus on the Linux partition.</p> <p>The <code>strings</code> command can be used to search for potential flags within the entire disk image.</p> <pre><code>strings disko-2.dd | grep -i 'pico'\n</code></pre> <p>This command returns multiple potential flags, which suggests that the correct flag is not just a simple string but requires us to find it in the correct partition.</p> <p>To isolate the Linux partition, we can use the <code>dd</code> command, which is a powerful tool for copying and converting files, often used for disk imaging. We need to specify the correct parameters based on the <code>fdisk</code> output.</p> <pre><code>dd if=disko-2.dd of=linux-part.dd bs=512 skip=2048 count=51200\n</code></pre> <ul> <li><code>dd</code>: The command line utility to copy and convert files.</li> <li><code>if=disko-2.dd</code>: Specifies the input file, which is our disk image.</li> <li><code>of=linux-part.dd</code>: Specifies the output file where the Linux partition will be written.</li> <li><code>bs=512</code>: Sets the block size to 512 bytes, which is the sector size reported by <code>fdisk</code>.</li> <li><code>skip=2048</code>: Skips 2048 input blocks before starting to copy. This value is the <code>Start</code> sector of the Linux partition from the <code>fdisk</code> output.</li> <li><code>count=51200</code>: Copies 51200 blocks. This value is the <code>Sectors</code> count of the Linux partition.</li> </ul> <p>After creating a new disk image containing only the Linux partition, we can run the <code>strings</code> command on this isolated partition to find the correct flag.</p> <pre><code>strings linux-part.dd | grep -i pico\n</code></pre> <p>The output now shows a single, correct flag.</p>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#flags_1","title":"Flags","text":"<pre><code>picoCTF{4_P4Rt_1t_i5_90a3f3d1}\n</code></pre>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#summary_1","title":"Summary","text":"<p>The challenge required us to extract a flag from a specific partition of a disk image. The disk image contained multiple partitions, and the flag was only present in the Linux partition. We used <code>fdisk</code> to analyze the partition table and identify the start and sector count of the Linux partition. We then used the <code>dd</code> command to create a new disk image containing only the Linux partition. Finally, the <code>strings</code> command was used on this isolated file to retrieve the flag. This process highlights the importance of using the correct forensic tools to navigate and analyze partitioned data, rather than treating the entire disk image as a single file.</p>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#disko-3","title":"DISKO 3","text":""},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#overview_2","title":"Overview","text":"<p>Challenge Name: DISKO 3</p> <p>Difficulty: Medium</p> <p>Category: Forensics</p> <p>Challenge Description:</p> <p>Can you find the flag in this disk image? This time, its not as plain as you think it is!</p>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#steps_2","title":"Steps","text":"<p>The provided file <code>disko-3.dd.gz</code> is a compressed disk image. The first step is to decompress it using <code>gunzip</code>.</p> <pre><code>gunzip disko-3.dd.gz\n</code></pre> <p>Next, the <code>file</code> command is used to identify the type of the extracted disk image <code>disko-3.dd</code>.</p> <pre><code>file disko-3.dd\n</code></pre> <p>The output indicates it is a DOS/MBR boot sector with a FAT32 file system. Unlike the previous challenges, a simple <code>strings</code> command did not reveal the flag, as the challenge description hints that it's \"not as plain as you think it is.\"</p> <p>Given that the image contains a file system, the next logical step is to mount the disk image to explore its contents. The <code>mount</code> command with the <code>-o loop</code> option is used to treat the file as a loop device, allowing it to be mounted like a physical disk.</p> <pre><code>sudo mount -o loop disko-3.dd /mnt/drive\n</code></pre> <p>Once mounted, we can navigate to the mount point, <code>/mnt/drive</code>, and list its contents. We find a single directory named <code>log</code>. Inside the <code>log</code> directory, we find a file named <code>flag.gz</code>.</p> <p>This <code>.gz</code> extension indicates that the file is compressed. We use <code>gunzip</code> to decompress the file, which results in a file named <code>flag</code>.</p> <p>Finally, we use the <code>cat</code> command to view the contents of the <code>flag</code> file. The contents of the file reveal the flag.</p>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#flags_2","title":"Flags","text":"<pre><code>picoCTF{n3v3r_z1p_2_h1d3_654235e0}\n</code></pre>"},{"location":"picoctf-writeups/forensics/disko-1-to-3/writeup/#summary_2","title":"Summary","text":"<p>The challenge <code>DISKO 3</code> required us to find a flag hidden within a disk image. Initial methods like <code>strings</code> proved ineffective, leading us to examine the file system's contents. By mounting the disk image, we were able to navigate its file structure. The flag was not directly visible but was instead hidden within a compressed <code>.gz</code> file. This challenge demonstrates that flags are not always in plain text and may require additional steps, such as decompression, to be retrieved.</p>"}]}